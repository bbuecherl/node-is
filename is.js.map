{"version":3,"file":"is.js","sources":["is.js","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/2"],"names":[],"mappings":"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","sourcesContent":["/*! is.js\n * by @bbuecherl\n * https://github.com/bbuecherl/node-is\n * License: MIT\n */\n( function( factory ) {\n    if( typeof module === \"object\" ) {\n        module.exports = factory( );\n    } else if( typeof define === \"function\" && define.amd ) {\n        define( [\"is\"], factory );\n    } else {\n        window.is = factory( );\n    }\n}( function( ) {\n\"use strict\";\n    // polyfill startsWith\n    String.prototype.startsWith = String.prototype.startsWith || function( str, offset ) {\n        offset = offset || 0;\n        return this.substring( offset, offset + str.length ) === str;\n    };\n\n    // references for frequently used stuff\n    //  typeof strings\n    var _number = \"number\",\n        _bool = \"boolean\",\n        _funct = \"function\",\n        _object = \"object\",\n        _string = \"string\",\n        _undef = \"undefined\",\n    // not identifier\n        _not = \"!\",\n    // default iterator\n        _iterator = \"@@iterator\",\n    // object references\n        _obj = {},\n        _array = [],\n        _regexp = new RegExp( _not ),\n    // are RegExp objects? ( fixing Chrome <13 )\n        _isRegExpObject = ( typeof _regexp === _object ),\n    // Object.prototype.toString.call(...) reference\n        _toString = o => _obj.toString.call( o ),\n    // toString values for array, regexp and error\n        _arr = _toString( _array ),\n        _regex = _toString( _regexp ),\n        _err = _toString( new Error( ) ),\n    // javascript error types\n        _errorTypes = [ \"TypeError\", \"ReferenceError\",\n            \"SyntaxError\", \"URIError\", \"EvalError\", \"RangeError\" ];\n\n\n    // polyfill es6 array iterator\n    if( typeof Symbol === _undef ) {\n        ( this || ( typeof global !== _undef ? global : false ) || window ).Symbol = {};\n    }\n    if( typeof Symbol.iterator === _undef ) {\n        Symbol.iterator = _iterator;\n    }\n    if( typeof Array.prototype[Symbol.iterator] === _undef ) {\n        Array.prototype[Symbol.iterator] = function( ) {\n            var index = 0,\n                array = this;\n            return {\n                next: ( ) => {\n                    return ( index < array.length ?\n                        { value: array[index++], done: false } :\n                        { value: undefined, done: true } );\n                }\n            };\n        };\n    }\n\n    // is-object\n    var is = {\n        // numeric types\n        Number: val => typeof val === _number,\n        Integer: val => is.Number( val ) && is.Finite( val ) && Math.floor( val ) === val,\n        Float: val => is.Number( val ) && is.Finite( val ) && Math.floor( val ) !== val,\n        Negative: val => val < 0,\n        Positive: val => val > 0,\n        NaN: val => isNaN( val ),\n        Infinity: val => val === Infinity || val === -Infinity,\n        Finite: val => !is.NaN( val ) && !is.Infinity( val ),\n\n        // boolean types\n        Boolean: val => typeof val === _bool,\n        True: val => is.Boolean( val ) && true === val,\n        False: val => is.Boolean( val ) && true !== val,\n\n        // strings\n        String: val => typeof val === _string,\n        EmptyString: val => is.String( val ) && val.length === 0,\n\n        // definitions\n        Undefined: val => typeof val === _undef,\n        Defined: val => !is.Undefined( val ),\n\n        //objects\n        Null: val => val === null,\n        Object: val => typeof val === _object || ( _isRegExpObject ? false : is.RegExp( val ) ),\n        Function: val => typeof val === _funct && ( _isRegExpObject ? true : !is.RegExp( val ) ),\n        Array: val => _toString( val ) === _arr,\n        RegExp: val => _toString( val ) === _regex,\n        RealObject: val => is.Object( val ) && !is.Function( val ) && !is.Null( val ) &&\n                !is.Array( val ) && !is.RegExp( val ) && !is.Error( val ),\n\n        //errors\n        Error: val => _toString( val ) === _err,\n        RealError: val => {\n            for( var e of _errorTypes ) {\n                if( is[e]( val ) ) {\n                    return false;\n                }\n            }\n            return is.Error( val );\n        },\n\n        //type.of multitests\n        type: {\n            of: (...values) => {\n                return {\n                    equal: (...args) => {\n                        for( var test of args ) {\n                            for( var val of values ) {\n                                if( is.Function( test ) && !test( val ) ) {\n                                    return false;\n                                } else if( is.String( test ) && ( test[0] === _not ?\n                                        is[test.substring( 1, test.length )]( val ) : !is[test]( val ) ) ) {\n                                    return false;\n                                } else if( !is.Function( test ) && !is.String( test ) ) {\n                                    return false;\n                                }\n                            }\n                        }\n                        return true;\n                    },\n                    either: (...args) => {\n                        for( var test of args ) {\n                            for( var val of values ) {\n                                if( is.Function( test ) && test( val ) ) {\n                                    return true;\n                                } else if( is.String( test ) && ( test[0] === _not ?\n                                        !is[test.substring( 1, test.length )]( val ) : is[test]( val ) ) ) {\n                                    return true;\n                                }\n                            }\n                        }\n                        return false;\n                    }\n                };\n            }\n        },\n\n        // expect.type.of functional test function\n        expect: ( function( ) {\n            var toArray = args => _array.slice.call( args, 0 ),\n                listExpected = ( args, lastSeperator ) => {\n                    var str = \"\";\n\n                    for( var ownFunct = 0, sep = \"\", i = 0; i < args.length; ++i ) {\n                        if( i === args.length - 1 ) {\n                            str += \" \" + lastSeperator + \" \";\n                        } else if( i !== 0 ) {\n                            str += \", \";\n                        }\n\n                        if( is.Function( arg ) ) {\n                            str += is.Defined( arg.name ) ? arg.name : ( \"custom$\" + ownFunct++ );\n                        } else if( is.String( arg ) ) {\n                            str += arg;\n                        } else {\n                            return \"unknown test statement\";\n                        }\n                    }\n\n                    return str;\n                };\n\n            return {\n                type: {\n                    of: (...values) => {\n                        var ref = is.type.of.apply( _array, values );\n\n                        return {\n                            to: {\n                                be: {\n                                    equal: (...args) => {\n                                        if( !ref.equal.apply( _array, args ) ) {\n                                            var exp = listExpected( args, \"and\" ),\n                                                arr = toArray( args ),\n                                                err = new Error( \"expected \" + arr + \" to be \" + exp );\n                                            err.name = \"AssertionError\";\n                                            err.actual = arr;\n                                            err.expected = exp;\n                                            err.showDiff = true;\n\n                                            throw err;\n                                        }\n                                    },\n\n                                    either: (...args) => {\n                                        if( !ref.either.apply( _array, args ) ) {\n                                            var exp = listExpected( args, \"or\" ),\n                                                arr = toArray( args ),\n                                                err = new Error( \"expected \" + arr + \" to be \" + exp );\n                                            err.name = \"AssertionError\";\n                                            err.actual = arr;\n                                            err.expected = exp;\n                                            err.showDiff = true;\n\n                                            throw err;\n                                        }\n                                    }\n                                }\n                            }\n                        };\n                    }\n                }\n            };\n        }( ) )\n    };\n\n    var errorTest = function( err ) {\n        return val => val.toString( ).startsWith( err );\n    };\n    for( var e of _errorTypes ) {\n        is[e] = errorTest( e );\n    }\n\n    return is;\n} ) );\n","\n        for (var $__placeholder__0 =\n                 $__placeholder__1[Symbol.iterator](),\n                 $__placeholder__2;\n             !($__placeholder__3 = $__placeholder__4.next()).done; ) {\n          $__placeholder__5;\n          $__placeholder__6;\n        }","\n            for (var $__placeholder__0 = [], $__placeholder__1 = 0;\n                 $__placeholder__2 < arguments.length; $__placeholder__3++)\n              $__placeholder__4[$__placeholder__5] = arguments[$__placeholder__6];"]}
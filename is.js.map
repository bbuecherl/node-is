{"version":3,"file":"is.js","sources":["is.js","@traceur/generated/TemplateParser/1","@traceur/generated/TemplateParser/2"],"names":[],"mappings":"AAKA;AAAA,CAAA,AAAE,SAAU,OAAO,CAAG;CAClB,KAAI,MAAO,OAAM,CAAA,GAAK,SAAQ,CAAG;AAC7B,CAAA,SAAM,QAAQ,EAAG,CAAA,OAAO,EAAG,CAAC;GAC/B,KAAM,KAAI,MAAO,OAAM,CAAA,GAAK,WAAU,CAAA,EAAI,CAAA,MAAM,IAAI,CAAG;AACpD,CAAA,SAAM,CAAE,CAAC,IAAI,CAAC,CAAE,QAAO,CAAE,CAAC;GAC7B,KAAM;AACH,CAAA,SAAM,GAAG,EAAG,CAAA,OAAO,EAAG,CAAC;GAC1B;CAAA,AACJ,CAAE,SAAS,AAAC;AACb,CAAA,aAAY,CAAC;AAGL,CAAJ,IAAI,CAAA,OAAO,EAAG,CAAA,IAAI,GAAI,EAAE,SAAS,AAAC,CAAE;CAC5B,MAAI;CACA,WAAO,EAAE,MAAO,OAAM,CAAA,GAAK,OAAM,CAAA,CAAG,OAAM,EAAG,MAAK,CAAE,CAAC;KACxD,CAAC,OAAO,CAAC,CAAG;CACT,WAAO,MAAK,CAAC;KAChB;CAAA,EACJ,EAAG,CAAE,CAAA,EAAI,OAAM;AAGhB,CAAA,YAAO,EAAG,SAAQ;AAClB,CAAA,UAAK,EAAG,UAAS;AACjB,CAAA,WAAM,EAAG,WAAU;AACnB,CAAA,YAAO,EAAG,SAAQ;AAClB,CAAA,YAAO,EAAG,SAAQ;AAClB,CAAA,WAAM,EAAG,YAAW;AAEpB,CAAA,SAAI,EAAG,IAAG;AAEV,CAAA,cAAS,EAAG,aAAY;AAExB,CAAA,SAAI,EAAG,GAAE;AACT,CAAA,WAAM,EAAG,GAAE;AACX,CAAA,YAAO,EAAG,IAAI,OAAM,CAAE,IAAI,CAAE;AAE5B,CAAA,oBAAe,EAAG,EAAE,MAAO,QAAO,CAAA,GAAK,QAAO,CAAE;AAEhD,CAAA,cAAS,aAAG,CAAC;cAAI,CAAA,IAAI,SAAS,KAAK,CAAE,CAAC,CAAE;QAAA;AAExC,CAAA,SAAI,EAAG,CAAA,SAAS,CAAE,MAAM,CAAE;AAC1B,CAAA,WAAM,EAAG,CAAA,SAAS,CAAE,OAAO,CAAE;AAC7B,CAAA,SAAI,EAAG,CAAA,SAAS,CAAE,GAAI,MAAK,EAAG,CAAE;AAEhC,CAAA,gBAAW,EAAG,EAAE,WAAW,CAAE,iBAAgB,CACzC,cAAa,CAAE,WAAU,CAAE,YAAW,CAAE,aAAY,CAAE;AAE1D,CAAA,iBAAY,aAAG,GAAG,CAAI;CAClB,aAAO,CAAA,GAAG,UAAU,CAAE,CAAC,CAAE,CAAC;OAC7B,CAAA,CAAC;AAGN,CAAA,OAAM,UAAU,WAAW,EAAG,CAAA,MAAM,UAAU,WAAW,GAAI,UAAU,GAAG,CAAE,CAAA,MAAM,CAAG;AACjF,CAAA,SAAM,EAAG,CAAA,MAAM,GAAI,EAAC,CAAC;CACrB,SAAO,CAAA,IAAI,UAAU,CAAE,MAAM,CAAE,CAAA,MAAM,EAAG,CAAA,GAAG,OAAO,CAAE,CAAA,GAAK,IAAG,CAAC;GAChE,CAAC;CAGF,KAAI,MAAO,QAAO,OAAO,CAAA,GAAK,OAAM,CAAG;AACnC,CAAA,UAAO,OAAO,EAAG,GAAG,CAAC;GACxB;AACD,CADC,KACG,MAAO,OAAM,SAAS,CAAA,GAAK,OAAM,CAAG;AACpC,CAAA,SAAM,SAAS,EAAG,UAAS,CAAC;GAC/B;AACD,CADC,KACG,MAAO,MAAK,UAAU,CAAC,MAAM,SAAS,CAAC,CAAA,GAAK,OAAM,CAAG;AACrD,CAAA,QAAK,UAAU,CAAC,MAAM,SAAS,CAAC,EAAG,UAAS,AAAC;AACrC,CAAJ,QAAI,CAAA,KAAK,EAAG,EAAC;AACT,CAAA,cAAK,EAAG,KAAI,CAAC;CACjB,WAAO,EACH,IAAI,aAAS;CACT,eAAO,EAAE,KAAK,EAAG,CAAA,KAAK,OAAO,CAAA,CACzB;AAAE,CAAA,gBAAK,CAAE,CAAA,KAAK,CAAC,KAAK,EAAE,CAAC;AAAE,CAAA,eAAI,CAAE,MAAK;CAAA,UAAE,EACtC;AAAE,CAAA,gBAAK,CAAE,UAAS;AAAE,CAAA,eAAI,CAAE,KAAI;CAAA,UAAE,CAAE,CAAC;SAC1C,CAAA,CACJ,CAAC;KACL,CAAC;GACL;AAGG,CAHH,IAGG,CAAA,cAAc,aAAK,QAAQ,CAAE,CAAA,MAAM,CAAM;AACrC,CAAJ,MAAI,CAAA,GAAG,EAAG,IAAI,MAAK,CAAE,WAAW,EAAG,OAAM,CAAA,CAAG,UAAS,CAAA,CAAG,SAAQ,CAAE,CAAC;AACnE,CAAA,MAAG,KAAK,EAAG,iBAAgB,CAAC;AAC5B,CAAA,MAAG,OAAO,EAAG,OAAM,CAAC;AACpB,CAAA,MAAG,SAAS,EAAG,SAAQ,CAAC;AACxB,CAAA,MAAG,SAAS,EAAG,KAAI,CAAC;CAEpB,SAAO,IAAG,CAAC;GACd,CAAA,CAAC;AAGE,CAAJ,IAAI,CAAA,EAAE,EAAG;AAEL,CAAA,SAAM,YAAE,GAAG;YAAI,CAAA,MAAO,IAAG,CAAA,GAAK,QAAO;MAAA;AACrC,CAAA,UAAO,YAAE,GAAG;YAAI,CAAA,EAAE,OAAO,CAAE,GAAG,CAAE,CAAA,EAAI,CAAA,EAAE,OAAO,CAAE,GAAG,CAAE,CAAA,EAAI,CAAA,IAAI,MAAM,CAAE,GAAG,CAAE,CAAA,GAAK,IAAG;MAAA;AACjF,CAAA,QAAK,YAAE,GAAG;YAAI,CAAA,EAAE,OAAO,CAAE,GAAG,CAAE,CAAA,EAAI,CAAA,EAAE,OAAO,CAAE,GAAG,CAAE,CAAA,EAAI,CAAA,IAAI,MAAM,CAAE,GAAG,CAAE,CAAA,GAAK,IAAG;MAAA;AAC/E,CAAA,WAAQ,YAAE,GAAG;YAAI,CAAA,GAAG,EAAG,EAAC;MAAA;AACxB,CAAA,WAAQ,YAAE,GAAG;YAAI,CAAA,GAAG,EAAG,EAAC;MAAA;AACxB,CAAA,MAAG,YAAE,GAAG;YAAI,CAAA,KAAK,CAAE,GAAG,CAAE;MAAA;AACxB,CAAA,WAAQ,YAAE,GAAG;YAAI,CAAA,GAAG,IAAK,SAAQ,CAAA,EAAI,CAAA,GAAG,IAAK,EAAC,QAAQ;MAAA;AACtD,CAAA,SAAM,YAAE,GAAG;YAAI,CAAA,CAAC,EAAE,IAAI,CAAE,GAAG,CAAE,CAAA,EAAI,EAAC,EAAE,SAAS,CAAE,GAAG,CAAE;MAAA;AAGpD,CAAA,UAAO,YAAE,GAAG;YAAI,CAAA,MAAO,IAAG,CAAA,GAAK,MAAK;MAAA;AACpC,CAAA,OAAI,YAAE,GAAG;YAAI,CAAA,EAAE,QAAQ,CAAE,GAAG,CAAE,CAAA,EAAI,CAAA,IAAI,IAAK,IAAG;MAAA;AAC9C,CAAA,QAAK,YAAE,GAAG;YAAI,CAAA,EAAE,QAAQ,CAAE,GAAG,CAAE,CAAA,EAAI,CAAA,IAAI,IAAK,IAAG;MAAA;AAG/C,CAAA,SAAM,YAAE,GAAG;YAAI,CAAA,MAAO,IAAG,CAAA,GAAK,QAAO;MAAA;AACrC,CAAA,cAAW,YAAE,GAAG;YAAI,CAAA,EAAE,OAAO,CAAE,GAAG,CAAE,CAAA,EAAI,CAAA,GAAG,OAAO,IAAK,EAAC;MAAA;AAGxD,CAAA,YAAS,YAAE,GAAG;YAAI,CAAA,MAAO,IAAG,CAAA,GAAK,OAAM;MAAA;AACvC,CAAA,UAAO,YAAE,GAAG;YAAI,EAAC,EAAE,UAAU,CAAE,GAAG,CAAE;MAAA;AAGpC,CAAA,OAAI,YAAE,GAAG;YAAI,CAAA,GAAG,IAAK,KAAI;MAAA;AACzB,CAAA,SAAM,YAAE,GAAG;YAAI,CAAA,MAAO,IAAG,CAAA,GAAK,QAAO,CAAA,EAAI,EAAE,eAAe,EAAG,MAAK,EAAG,CAAA,EAAE,OAAO,CAAE,GAAG,CAAE,CAAE;MAAA;AACvF,CAAA,WAAQ,YAAE,GAAG;YAAI,CAAA,MAAO,IAAG,CAAA,GAAK,OAAM,CAAA,EAAI,EAAE,eAAe,EAAG,KAAI,EAAG,EAAC,EAAE,OAAO,CAAE,GAAG,CAAE,CAAE;MAAA;AACxF,CAAA,QAAK,YAAE,GAAG;YAAI,CAAA,SAAS,CAAE,GAAG,CAAE,CAAA,GAAK,KAAI;MAAA;AACvC,CAAA,aAAU,YAAE,GAAG;YAAI,CAAA,EAAE,MAAM,CAAE,GAAG,CAAE,CAAA,EAAI,CAAA,GAAG,OAAO,IAAK,EAAC;MAAA;AACtD,CAAA,SAAM,YAAE,GAAG;YAAI,CAAA,SAAS,CAAE,GAAG,CAAE,CAAA,GAAK,OAAM;MAAA;AAC1C,CAAA,aAAU,YAAE,GAAG;YAAI,CAAA,EAAE,OAAO,CAAE,GAAG,CAAE,CAAA,EAAI,EAAC,EAAE,SAAS,CAAE,GAAG,CAAE,CAAA,EAAI,EAAC,EAAE,KAAK,CAAE,GAAG,CAAE,CAAA,EACrE,EAAC,EAAE,MAAM,CAAE,GAAG,CAAE,CAAA,EAAI,EAAC,EAAE,OAAO,CAAE,GAAG,CAAE,CAAA,EAAI,EAAC,EAAE,MAAM,CAAE,GAAG,CAAE;MAAA;AAGjE,CAAA,QAAK,YAAE,GAAG;YAAI,CAAA,SAAS,CAAE,GAAG,CAAE,CAAA,GAAK,KAAI;MAAA;AACvC,CAAA,YAAS,YAAE,GAAG;CClId,UAAS,GAAA,OACA,CDkIS,WAAW,CClIF,MAAM,SAAS,CAAC,EAAE;CACpC,aAAiB,CACrB,EAAC,CAAC,MAAoB,CAAA,SAAsB,EAAE,CAAC,KAAK,GAAI;WDgIhD,EAAC;CAAkB;CACxB,aAAI,EAAE,CAAC,CAAC,CAAC,CAAE,GAAG,CAAE,CAAG;CACf,iBAAO,MAAK,CAAC;WAChB;CAAA,QACJ;OCjIJ;ADkIG,CClIH,WDkIU,CAAA,EAAE,MAAM,CAAE,GAAG,CAAE,CAAC;MAC1B;AAGD,CAAA,OAAI,CAAE,EACF,EAAE;CE7IF,YAAS,GAAA,SAAoB,GAAE;CAAE,iBAAoB,EAAC,CACjD,OAAoB,CAAA,SAAS,OAAO,CAAE,OAAmB;AAC5D,CAAA,qBAAoC,EAAG,CAAA,SAAS,MAAmB,CAAC;AF4IlE,CE5IkE,aF4I3D;AACH,CAAA,cAAK;CE/Ib,gBAAS,GAAA,OAAoB,GAAE;CAAE,qBAAoB,EAAC,CACjD,OAAoB,CAAA,SAAS,OAAO,CAAE,OAAmB;AAC5D,CAAA,uBAAoC,EAAG,CAAA,SAAS,MAAmB,CAAC;ADF1E,CCE0E,gBDFjE,GAAA,OACA,CD+IwB,IAAI,CC/IV,MAAM,SAAS,CAAC,EAAE;CACpC,mBAAiB,CACrB,EAAC,CAAC,MAAoB,CAAA,SAAsB,EAAE,CAAC,KAAK,GAAI;iBD6IpC,KAAI;CAAW;CChJxC,oBAAS,GAAA,OACA,CDgJ2B,MAAM,CChJf,MAAM,SAAS,CAAC,EAAE;CACpC,uBAAiB,CACrB,EAAC,CAAC,MAAoB,CAAA,SAAsB,EAAE,CAAC,KAAK,GAAI;qBD8IhC,IAAG;CAAa;CACrB,uBAAI,EAAE,SAAS,CAAE,IAAI,CAAE,CAAA,EAAI,EAAC,IAAI,CAAE,GAAG,CAAE,CAAG;CACtC,2BAAO,MAAK,CAAC;qBAChB,KAAM,KAAI,EAAE,OAAO,CAAE,IAAI,CAAE,CAAA,EAAI,EAAE,IAAI,CAAC,CAAC,CAAC,IAAK,KAAI,CAAA,CAC1C,CAAA,EAAE,CAAC,IAAI,UAAU,CAAE,CAAC,CAAE,CAAA,IAAI,OAAO,CAAE,CAAC,CAAE,GAAG,CAAE,CAAA,CAAG,EAAC,EAAE,CAAC,IAAI,CAAC,CAAE,GAAG,CAAE,CAAE,CAAG;CACvE,2BAAO,MAAK,CAAC;qBAChB,KAAM,KAAI,CAAC,EAAE,SAAS,CAAE,IAAI,CAAE,CAAA,EAAI,EAAC,EAAE,OAAO,CAAE,IAAI,CAAE,CAAG;CACpD,2BAAO,MAAK,CAAC;qBAChB;CAAA,kBACJ;iBCpJpB;CAAA,cDqJgB;aCrJhB;ADsJe,CCtJf,iBDsJsB,KAAI,CAAC;YACf;AACD,CAAA,eAAM;CE9Jd,gBAAS,GAAA,OAAoB,GAAE;CAAE,qBAAoB,EAAC,CACjD,OAAoB,CAAA,SAAS,OAAO,CAAE,OAAmB;AAC5D,CAAA,uBAAoC,EAAG,CAAA,SAAS,MAAmB,CAAC;ADF1E,CCE0E,gBDFjE,GAAA,OACA,CD8JwB,IAAI,CC9JV,MAAM,SAAS,CAAC,EAAE;CACpC,mBAAiB,CACrB,EAAC,CAAC,MAAoB,CAAA,SAAsB,EAAE,CAAC,KAAK,GAAI;iBD4JpC,KAAI;CAAW;CC/JxC,oBAAS,GAAA,OACA,CD+J2B,MAAM,CC/Jf,MAAM,SAAS,CAAC,EAAE;CACpC,uBAAiB,CACrB,EAAC,CAAC,MAAoB,CAAA,SAAsB,EAAE,CAAC,KAAK,GAAI;qBD6JhC,IAAG;CAAa;CACrB,uBAAI,EAAE,SAAS,CAAE,IAAI,CAAE,CAAA,EAAI,CAAA,IAAI,CAAE,GAAG,CAAE,CAAG;CACrC,2BAAO,KAAI,CAAC;qBACf,KAAM,KAAI,EAAE,OAAO,CAAE,IAAI,CAAE,CAAA,EAAI,EAAE,IAAI,CAAC,CAAC,CAAC,IAAK,KAAI,CAAA,CAC1C,EAAC,EAAE,CAAC,IAAI,UAAU,CAAE,CAAC,CAAE,CAAA,IAAI,OAAO,CAAE,CAAC,CAAE,GAAG,CAAE,CAAA,CAAG,CAAA,EAAE,CAAC,IAAI,CAAC,CAAE,GAAG,CAAE,CAAE,CAAG;CACvE,2BAAO,KAAI,CAAC;qBACf;CAAA,kBACJ;iBCjKpB;CAAA,cDkKgB;aClKhB;ADmKe,CCnKf,iBDmKsB,MAAK,CAAC;YAChB;SACJ,CAAC;QACL,CACJ;AAGD,CAAA,SAAM,CAAE,EAAE,SAAS,AAAC;AACZ,CAAJ,QAAI,CAAA,OAAO,aAAG,IAAI;cAAI,CAAA,MAAM,MAAM,KAAK,CAAE,IAAI,CAAE,EAAC,CAAE;QAAA;AAC9C,CAAA,qBAAY,aAAK,IAAI,CAAE,CAAA,aAAa,CAAM;AAClC,CAAJ,cAAI,CAAA,GAAG,EAAG,GAAE,CAAC;CAEb,gBAAS,GAAA,CAAA,QAAQ,EAAG,EAAC;AAAE,CAAA,kBAAG,EAAG,GAAE;AAAE,CAAA,gBAAC,EAAG,EAAC;AAAE,CAAA,kBAAG,CAAE,CAAA,CAAC,EAAG,CAAA,IAAI,OAAO,CAAE,GAAE,CAAC,CAAG;AAChE,CAAA,gBAAG,EAAG,CAAA,IAAI,CAAC,CAAC,CAAC,CAAC;CAEd,iBAAI,CAAC,IAAK,EAAC,CAAA,EAAI,CAAA,CAAC,IAAK,CAAA,IAAI,OAAO,EAAG,EAAC,CAAG;AACnC,CAAA,kBAAG,GAAI,CAAA,GAAG,EAAG,cAAa,CAAA,CAAG,IAAG,CAAC;eACpC,KAAM,KAAI,CAAC,IAAK,EAAC,CAAG;AACjB,CAAA,kBAAG,GAAI,KAAI,CAAC;eACf;AAED,CAFC,iBAEG,EAAE,SAAS,CAAE,GAAG,CAAE,CAAG;AACrB,CAAA,kBAAG,GAAI,CAAA,EAAE,QAAQ,CAAE,GAAG,KAAK,CAAE,CAAA,CAAG,CAAA,GAAG,KAAK,EAAG,EAAE,SAAS,EAAG,CAAA,QAAQ,EAAE,CAAE,CAAC;eACzE,KAAM,KAAI,EAAE,OAAO,CAAE,GAAG,CAAE,CAAA,EAAI,CAAA,EAAE,eAAe,CAAE,GAAG,CAAE,CAAA,EAAI,CAAA,EAAE,OAAO,CAAE,GAAG,CAAE,CAAA,EAAI,CAAA,EAAE,eAAe,CAAE,YAAY,CAAE,GAAG,CAAE,CAAE,CAAG;AACtH,CAAA,kBAAG,GAAI,IAAG,CAAC;eACd,KAAM;AACH,CAAA,kBAAG,GAAI,CAAA,2BAA2B,EAAG,IAAG,CAAA,CAAG,KAAI,CAAC;eACnD;CAAA,YACJ;AAED,CAFC,iBAEM,IAAG,CAAC;WACd,CAAA,CAAC;CAEN,WAAO,EACH,IAAI,CAAE,EACF,EAAE;CE5MV,gBAAS,GAAA,SAAoB,GAAE;CAAE,qBAAoB,EAAC,CACjD,OAAoB,CAAA,SAAS,OAAO,CAAE,OAAmB;AAC5D,CAAA,yBAAoC,EAAG,CAAA,SAAS,MAAmB,CAAC;AF2MtD,CE3MsD,cF2MtD,CAAA,GAAG,EAAG,CAAA,EAAE,KAAK,GAAG,MAAM,CAAE,MAAM,CAAE,OAAM,CAAE,CAAC;CAE7C,iBAAO,EACH,EAAE,CAAE,EACA,EAAE,CAAE;AACA,CAAA,sBAAK,aAAiB;CElN9C,wBAAS,GAAA,OAAoB,GAAE;CAAE,6BAAoB,EAAC,CACjD,OAAoB,CAAA,SAAS,OAAO,CAAE,OAAmB;AAC5D,CAAA,+BAAoC,EAAG,CAAA,SAAS,MAAmB,CAAC;AFiN1C,CEjN0C,uBFiNtC,CAAC,GAAG,MAAM,MAAM,CAAE,MAAM,CAAE,KAAI,CAAE,CAAG;AAC/B,CAAJ,wBAAI,CAAA,GAAG,EAAG,CAAA,YAAY,CAAE,IAAI,CAAE,MAAK,CAAE;AACjC,CAAA,4BAAG,EAAG,CAAA,OAAO,CAAE,MAAM,CAAE,CAAC;CAE5B,0BAAM,CAAA,cAAc,CAAE,GAAG,CAAE,IAAG,CAAE,CAAC;qBACpC;AACD,CADC,yBACM,KAAI,CAAC;mBACf,CAAA;AAED,CAAA,uBAAM,aAAiB;CE5N/C,wBAAS,GAAA,OAAoB,GAAE;CAAE,6BAAoB,EAAC,CACjD,OAAoB,CAAA,SAAS,OAAO,CAAE,OAAmB;AAC5D,CAAA,+BAAoC,EAAG,CAAA,SAAS,MAAmB,CAAC;AF2N1C,CE3N0C,uBF2NtC,CAAC,GAAG,OAAO,MAAM,CAAE,MAAM,CAAE,KAAI,CAAE,CAAG;AAChC,CAAJ,wBAAI,CAAA,GAAG,EAAG,CAAA,YAAY,CAAE,IAAI,CAAE,KAAI,CAAE;AAChC,CAAA,4BAAG,EAAG,CAAA,OAAO,CAAE,MAAM,CAAE,CAAC;CAE5B,0BAAM,CAAA,cAAc,CAAE,GAAG,CAAE,IAAG,CAAE,CAAC;qBACpC;AACD,CADC,yBACM,KAAI,CAAC;mBACf,CAAA;iBACJ,CACJ,CACJ,CAAC;YACL,CACJ,CACJ,CAAC;KACL,EAAG,CAAE;AAGN,CAAA,SAAM,YAAI,IAAI,CAAE,CAAA,EAAE,CAAM;CACpB,SAAI,EAAE,OAAO,CAAE,IAAI,CAAE,CAAA,EAAI,CAAA,EAAE,SAAS,CAAE,EAAE,CAAE,CAAA,EAAI,EAAC,EAAE,eAAe,CAAE,IAAI,CAAE,CAAG;AACvE,CAAA,SAAE,CAAC,IAAI,CAAC,EAAG,GAAE,CAAC;OACjB;CAAA,IACJ,CAAA;GACJ,CAAC;AAEE,CAAJ,IAAI,CAAA,SAAS,aAAG,GAAG;CACf,oBAAO,GAAG;YAAI,CAAA,GAAG,SAAS,EAAG,WAAW,CAAE,GAAG,CAAE;OAAC;IACnD,CAAC;CCvPE,MAAS,GAAA,OACA,CDuPC,WAAW,CCvPM,MAAM,SAAS,CAAC,EAAE;CACpC,SAAiB,CACrB,EAAC,CAAC,MAAoB,CAAA,SAAsB,EAAE,CAAC,KAAK,GAAI;ODqPxD,EAAC;CAAkB;AACxB,CAAA,OAAE,CAAC,CAAC,CAAC,EAAG,CAAA,SAAS,CAAE,CAAC,CAAE,CAAC;KAC1B;GCpPI;ADsPL,CCtPK,ODsPE,GAAE,CAAC;CACb,CAAE,CAAE,CAAC;CACN","sourcesContent":["/*! is.js\r\n * by @bbuecherl\r\n * https://github.com/bbuecherl/node-is\r\n * License: MIT\r\n */\r\n( function( factory ) {\r\n    if( typeof module === \"object\" ) {\r\n        module.exports = factory( );\r\n    } else if( typeof define === \"function\" && define.amd ) {\r\n        define( [\"is\"], factory );\r\n    } else {\r\n        window.is = factory( );\r\n    }\r\n}( function( ) {\r\n\"use strict\";\r\n    // references for frequently used stuff\r\n    // global object\r\n    var _global = this || ( function( ) {\r\n            try {\r\n                return ( typeof global !== _undef ? global : false );\r\n            } catch( e ) {\r\n                return false;\r\n            }\r\n        }( ) ) || window,\r\n\r\n    //  typeof strings\r\n        _number = \"number\",\r\n        _bool = \"boolean\",\r\n        _funct = \"function\",\r\n        _object = \"object\",\r\n        _string = \"string\",\r\n        _undef = \"undefined\",\r\n    // not identifier\r\n        _not = \"!\",\r\n    // default iterator\r\n        _iterator = \"@@iterator\",\r\n    // object references\r\n        _obj = {},\r\n        _array = [],\r\n        _regexp = new RegExp( _not ),\r\n    // are RegExp objects? ( fixing Chrome <13 )\r\n        _isRegExpObject = ( typeof _regexp === _object ),\r\n    // Object.prototype.toString.call(...) reference\r\n        _toString = o => _obj.toString.call( o ),\r\n    // toString values for array, regexp and error\r\n        _arr = _toString( _array ),\r\n        _regex = _toString( _regexp ),\r\n        _err = _toString( new Error( ) ),\r\n    // javascript error types\r\n        _errorTypes = [ \"TypeError\", \"ReferenceError\",\r\n            \"SyntaxError\", \"URIError\", \"EvalError\", \"RangeError\" ],\r\n    // helper function\r\n        _removeFirst = str => {\r\n            return str.substring( 1 );\r\n        };\r\n\r\n    // polyfill startsWith\r\n    String.prototype.startsWith = String.prototype.startsWith || function( str, offset ) {\r\n        offset = offset || 0;\r\n        return this.substring( offset, offset + str.length ) === str;\r\n    };\r\n\r\n    // polyfill es6 array iterator\r\n    if( typeof _global.Symbol === _undef ) {\r\n        _global.Symbol = { };\r\n    }\r\n    if( typeof Symbol.iterator === _undef ) {\r\n        Symbol.iterator = _iterator;\r\n    }\r\n    if( typeof Array.prototype[Symbol.iterator] === _undef ) {\r\n        Array.prototype[Symbol.iterator] = function( ) {\r\n            var index = 0,\r\n                array = this;\r\n            return {\r\n                next: ( ) => {\r\n                    return ( index < array.length ?\r\n                        { value: array[index++], done: false } :\r\n                        { value: undefined, done: true } );\r\n                }\r\n            };\r\n        };\r\n    }\r\n\r\n    // AssertionError constructor\r\n    var assertionError = ( expected, actual ) => {\r\n        var tmp = new Error( \"expected \" + actual + \" to be \" + expected );\r\n        tmp.name = \"AssertionError\";\r\n        tmp.actual = actual;\r\n        tmp.expected = expected;\r\n        tmp.showDiff = true;\r\n\r\n        return tmp;\r\n    };\r\n\r\n    // is-object\r\n    var is = {\r\n        // numeric types\r\n        Number: val => typeof val === _number,\r\n        Integer: val => is.Number( val ) && is.Finite( val ) && Math.floor( val ) === val,\r\n        Float: val => is.Number( val ) && is.Finite( val ) && Math.floor( val ) !== val,\r\n        Negative: val => val < 0,\r\n        Positive: val => val > 0,\r\n        NaN: val => isNaN( val ),\r\n        Infinity: val => val === Infinity || val === -Infinity,\r\n        Finite: val => !is.NaN( val ) && !is.Infinity( val ),\r\n\r\n        // boolean types\r\n        Boolean: val => typeof val === _bool,\r\n        True: val => is.Boolean( val ) && true === val,\r\n        False: val => is.Boolean( val ) && true !== val,\r\n\r\n        // strings\r\n        String: val => typeof val === _string,\r\n        EmptyString: val => is.String( val ) && val.length === 0,\r\n\r\n        // definitions\r\n        Undefined: val => typeof val === _undef,\r\n        Defined: val => !is.Undefined( val ),\r\n\r\n        //objects\r\n        Null: val => val === null,\r\n        Object: val => typeof val === _object || ( _isRegExpObject ? false : is.RegExp( val ) ),\r\n        Function: val => typeof val === _funct && ( _isRegExpObject ? true : !is.RegExp( val ) ),\r\n        Array: val => _toString( val ) === _arr,\r\n        EmptyArray: val => is.Array( val ) && val.length === 0,\r\n        RegExp: val => _toString( val ) === _regex,\r\n        RealObject: val => is.Object( val ) && !is.Function( val ) && !is.Null( val ) &&\r\n                !is.Array( val ) && !is.RegExp( val ) && !is.Error( val ),\r\n\r\n        //errors\r\n        Error: val => _toString( val ) === _err,\r\n        RealError: val => {\r\n            for( var e of _errorTypes ) {\r\n                if( is[e]( val ) ) {\r\n                    return false;\r\n                }\r\n            }\r\n            return is.Error( val );\r\n        },\r\n\r\n        //type.of multitests\r\n        type: {\r\n            of: ( ...values ) => {\r\n                return {\r\n                    equal: ( ...args ) => {\r\n                        for( var test of args ) {\r\n                            for( var val of values ) {\r\n                                if( is.Function( test ) && !test( val ) ) {\r\n                                    return false;\r\n                                } else if( is.String( test ) && ( test[0] === _not ?\r\n                                        is[test.substring( 1, test.length )]( val ) : !is[test]( val ) ) ) {\r\n                                    return false;\r\n                                } else if( !is.Function( test ) && !is.String( test ) ) {\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                        return true;\r\n                    },\r\n                    either: ( ...args ) => {\r\n                        for( var test of args ) {\r\n                            for( var val of values ) {\r\n                                if( is.Function( test ) && test( val ) ) {\r\n                                    return true;\r\n                                } else if( is.String( test ) && ( test[0] === _not ?\r\n                                        !is[test.substring( 1, test.length )]( val ) : is[test]( val ) ) ) {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        }\r\n                        return false;\r\n                    }\r\n                };\r\n            }\r\n        },\r\n\r\n        // expect.type.of functional test function\r\n        expect: ( function( ) {\r\n            var toArray = args => _array.slice.call( args, 0 ),\r\n                listExpected = ( args, lastSeperator ) => {\r\n                    var str = \"\";\r\n\r\n                    for( var ownFunct = 0, sep = \"\", i = 0, arg; i < args.length; ++i ) {\r\n                        arg = args[i];\r\n\r\n                        if( i !== 0 && i === args.length - 1 ) {\r\n                            str += \" \" + lastSeperator + \" \";\r\n                        } else if( i !== 0 ) {\r\n                            str += \", \";\r\n                        }\r\n\r\n                        if( is.Function( arg ) ) {\r\n                            str += is.Defined( arg.name ) ? arg.name : ( \"custom$\" + ownFunct++ );\r\n                        } else if( is.String( arg ) && is.hasOwnProperty( arg ) || is.String( arg ) && is.hasOwnProperty( _removeFirst( arg ) ) ) {\r\n                            str += arg;\r\n                        } else {\r\n                            str += \"<unknown test statement '\" + arg + \"'>\";\r\n                        }\r\n                    }\r\n\r\n                    return str;\r\n                };\r\n\r\n            return {\r\n                type: {\r\n                    of: ( ...values ) => {\r\n                        var ref = is.type.of.apply( _array, values );\r\n\r\n                        return {\r\n                            to: {\r\n                                be: {\r\n                                    equal: ( ...args ) => {\r\n                                        if( !ref.equal.apply( _array, args ) ) {\r\n                                            var exp = listExpected( args, \"and\" ),\r\n                                                arr = toArray( values );\r\n\r\n                                            throw assertionError( exp, arr );\r\n                                        }\r\n                                        return true;\r\n                                    },\r\n\r\n                                    either: ( ...args ) => {\r\n                                        if( !ref.either.apply( _array, args ) ) {\r\n                                            var exp = listExpected( args, \"or\" ),\r\n                                                arr = toArray( values );\r\n\r\n                                            throw assertionError( exp, arr );\r\n                                        }\r\n                                        return true;\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                    }\r\n                }\r\n            };\r\n        }( ) ),\r\n\r\n        // extend is.js by custom Tests\r\n        extend: ( name, fn ) => {\r\n            if( is.String( name ) && is.Function( fn ) && !is.hasOwnProperty( name ) ) {\r\n                is[name] = fn;\r\n            } // currently fails silently\r\n        }\r\n    };\r\n\r\n    var errorTest = err => {\r\n        return val => val.toString( ).startsWith( err );\r\n    };\r\n    for( var e of _errorTypes ) {\r\n        is[e] = errorTest( e );\r\n    }\r\n\r\n    return is;\r\n} ) );\r\n","\n        for (var $__placeholder__0 =\n                 $__placeholder__1[Symbol.iterator](),\n                 $__placeholder__2;\n             !($__placeholder__3 = $__placeholder__4.next()).done; ) {\n          $__placeholder__5;\n          $__placeholder__6;\n        }","\n            for (var $__placeholder__0 = [], $__placeholder__1 = 0;\n                 $__placeholder__2 < arguments.length; $__placeholder__3++)\n              $__placeholder__4[$__placeholder__5] = arguments[$__placeholder__6];"]}